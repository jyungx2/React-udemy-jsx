{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoung/jsx2/src/index.js\";\n// 1) Import the React and ReactDOM libraries\nimport React from \"react\";\n// React: 여러 개의 컴포넌트들이 어떤 식으로 함께 적용되는지를 정의하거나 컴포넌트가 무엇인지를 정의하는 라이브러리.\nimport ReactDOM from \"react-dom/client\";\n// ReactDOM: 컴포넌트를 브라우저 상에 보여주는 라이브러리\n// = 컴포넌트들을 가져다가, HTML로 바꿔주고 브라우저 상에 보여줌\n\n// 2) Get a reference to the div with ID root\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst el = document.getElementById(\"root\");\n\n// 3) Tell React to take control of that element\nconst root = ReactDOM.createRoot(el);\n\n// 4) Create a component\n// function App() {\n//   // 📌 문자열이나 숫자가 우리가 보여주고 싶은 데이터 타입이기 때문에 보통 이 둘만 출력한다. (배열이나 불리안은 우리가 원하는 대로 출력 X)\n//   // 이때, 리액트는 텍스트 컨텐트로서 object를 보여주지 못한다. 따라서 end up getting an error..\n//   let message = \"Bye there!\";\n//   if (Math.random() > 0.5) {\n//     message = \"Hello there!\";\n//   }\n\n//   // 📌 JSX 안에 있는 변수를 curly braces를 이용해 보여줄 수 있다.\n//   // => most often use curly braces to show strings or numbers.\n//   return <h1>{message}</h1>;\n// }\n\n// 💎 Customizing elements with JSX props(=properties)\n// very similiar to HTML attributes\n// What are the differences btw those??\n// 📌 HTML 속성: HTML에서 <input type=\"text\" value=\"Hello\" />와 같은 방식으로 속성을 정의합니다. 이때, 속성값은 항상 문자열로 처리됩니다.\n\n// 📌 JSX props: JSX에서 React 컴포넌트의 속성은 props라고 불리며, JSX 내에서 React 요소의 속성을 정의할 때 사용합니다. 예를 들어, <MyComponent name=\"John\" />처럼 사용할 수 있습니다. 여기서 name은 props에 해당하고, \"John\"은 그 값입니다.\nfunction App() {\n  // const inputType = \"number\";\n  // const minValue = 5;\n  // return <input type={inputType} min={minValue} max={10} />;\n\n  // Props don't have to be defined as variables.\n  // 💥string should have \"\" & number should have {}.\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    style: {\n      border: \"3px solid red\"\n    },\n    type: \"number\",\n    min: 5\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n\n  // something that has to be clarified about displaying the object.\n  // const config = { color: 'red'}\n  // return (\n  //   <div>\n  // ❌ Trying to display an object -> Doesn't work!\n  // we can't print it out on the screen -> 💥Error\n  // (= An object can't go in between JSX tags..)\n  //     ❌<h1>{config}</h1>❌\n  // ✅ Trying to provide an object as a prop. OK! ✅\n  // Not OK as something that we want to display\n  //     ✅<input abc={config} />✅\n  //   </div>\n  // );\n}\n// 5) Show the component on the screen\n_c = App;\nroot.render(/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 58,\n  columnNumber: 13\n}, this));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDOM","jsxDEV","_jsxDEV","el","document","getElementById","root","createRoot","App","style","border","type","min","fileName","_jsxFileName","lineNumber","columnNumber","_c","render","$RefreshReg$"],"sources":["/Users/jiyoung/jsx2/src/index.js"],"sourcesContent":["// 1) Import the React and ReactDOM libraries\nimport React from \"react\";\n// React: 여러 개의 컴포넌트들이 어떤 식으로 함께 적용되는지를 정의하거나 컴포넌트가 무엇인지를 정의하는 라이브러리.\nimport ReactDOM from \"react-dom/client\";\n// ReactDOM: 컴포넌트를 브라우저 상에 보여주는 라이브러리\n// = 컴포넌트들을 가져다가, HTML로 바꿔주고 브라우저 상에 보여줌\n\n// 2) Get a reference to the div with ID root\nconst el = document.getElementById(\"root\");\n\n// 3) Tell React to take control of that element\nconst root = ReactDOM.createRoot(el);\n\n// 4) Create a component\n// function App() {\n//   // 📌 문자열이나 숫자가 우리가 보여주고 싶은 데이터 타입이기 때문에 보통 이 둘만 출력한다. (배열이나 불리안은 우리가 원하는 대로 출력 X)\n//   // 이때, 리액트는 텍스트 컨텐트로서 object를 보여주지 못한다. 따라서 end up getting an error..\n//   let message = \"Bye there!\";\n//   if (Math.random() > 0.5) {\n//     message = \"Hello there!\";\n//   }\n\n//   // 📌 JSX 안에 있는 변수를 curly braces를 이용해 보여줄 수 있다.\n//   // => most often use curly braces to show strings or numbers.\n//   return <h1>{message}</h1>;\n// }\n\n// 💎 Customizing elements with JSX props(=properties)\n// very similiar to HTML attributes\n// What are the differences btw those??\n// 📌 HTML 속성: HTML에서 <input type=\"text\" value=\"Hello\" />와 같은 방식으로 속성을 정의합니다. 이때, 속성값은 항상 문자열로 처리됩니다.\n\n// 📌 JSX props: JSX에서 React 컴포넌트의 속성은 props라고 불리며, JSX 내에서 React 요소의 속성을 정의할 때 사용합니다. 예를 들어, <MyComponent name=\"John\" />처럼 사용할 수 있습니다. 여기서 name은 props에 해당하고, \"John\"은 그 값입니다.\nfunction App() {\n  // const inputType = \"number\";\n  // const minValue = 5;\n  // return <input type={inputType} min={minValue} max={10} />;\n\n  // Props don't have to be defined as variables.\n  // 💥string should have \"\" & number should have {}.\n  return <input style={{ border: \"3px solid red\" }} type=\"number\" min={5} />;\n\n  // something that has to be clarified about displaying the object.\n  // const config = { color: 'red'}\n  // return (\n  //   <div>\n  // ❌ Trying to display an object -> Doesn't work!\n  // we can't print it out on the screen -> 💥Error\n  // (= An object can't go in between JSX tags..)\n  //     ❌<h1>{config}</h1>❌\n  // ✅ Trying to provide an object as a prop. OK! ✅\n  // Not OK as something that we want to display\n  //     ✅<input abc={config} />✅\n  //   </div>\n  // );\n}\n// 5) Show the component on the screen\nroot.render(<App />);\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,OAAOC,QAAQ,MAAM,kBAAkB;AACvC;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,EAAE,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;;AAE1C;AACA,MAAMC,IAAI,GAAGN,QAAQ,CAACO,UAAU,CAACJ,EAAE,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAASK,GAAGA,CAAA,EAAG;EACb;EACA;EACA;;EAEA;EACA;EACA,oBAAON,OAAA;IAAOO,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAgB,CAAE;IAACC,IAAI,EAAC,QAAQ;IAACC,GAAG,EAAE;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;;EAE1E;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AACA;AAAAC,EAAA,GAvBST,GAAG;AAwBZF,IAAI,CAACY,MAAM,cAAChB,OAAA,CAACM,GAAG;EAAAK,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,CAAC;AAAC,IAAAC,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}